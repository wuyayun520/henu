name: Build and Distribute

on:
  push:
    branches:
      - main

jobs:
  build:
    name: build
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2

      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.27.3'
    
      - name: Setup Flutter Environment
        run: |
          flutter clean
          flutter pub get 
      
      # 清除 Xcode 缓存
      - name: Clean Xcode Cache
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData
          rm -rf ~/Library/Developer/Xcode/iOS\ DeviceSupport
          rm -rf ~/Library/Developer/Xcode/Archives
          rm -rf ~/Library/Developer/Xcode/Products
          
      # 添加 Xcode 版本选择
      - name: Select Xcode 16.2
        run: sudo xcode-select -s /Applications/Xcode_16.2.app
        
      # 设置 CocoaPods
      # - name: Setup CocoaPods
      #   run: |
      #     cd ios
      #     rm -rf Pods
      #     rm -f Podfile.lock
      #     pod install --repo-update
          
      # 添加详细的环境信息调试步骤
      - name: Print Environment Info
        run: |
          echo "============= Environment Variables ============="
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          FLUTTER_ROOT=$(which flutter | xargs dirname | xargs dirname)
          echo "FLUTTER_ROOT: $FLUTTER_ROOT"
          echo "FLUTTER_APPLICATION_PATH: $GITHUB_WORKSPACE"
          echo "Current Directory: $(pwd)"


      - uses: cedvdb/action-flutter-build-ios@v1
        with:
          build-cmd: |
            flutter build ipa --release --export-options-plist=ios/ExportOptions.plist --no-tree-shake-icons
          certificate-base64: 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


          certificate-password: 111111
          
          provisioning-profile-base64: 

          keychain-password: 111111

      # # 添加检查步骤
      - name: 检查构建文件
        run: |
          echo "检查 build/ios/ipa 目录内容："
          ls -la build/ios/ipa/
          echo "检查 build/ios 目录内容："
          ls -la build/ios/

      - name: Archive IPA
        uses: actions/upload-artifact@v4
        with:
          name: release-ipa
          path: build/ios/ipa


      - name: Upload to App Store using altool
        env:
          IPA_PATH: "build/ios/ipa/henu.ipa"
          APPLE_ID: "kissy503@outlook.com"
          APP_SPECIFIC_PASSWORD: "auaa-zjvf-pulj-yoas"
        run: |
          xcrun altool --upload-app -f "$IPA_PATH" \
            -t ios \
            -u "$APPLE_ID" \
            -p "$APP_SPECIFIC_PASSWORD" \
            --verbose
